//@version=3
study(title='[RS]Price Divergence Detector V2.022', shorttitle='D', overlay=true)
//  ||  Revision:   |   Notes:
//  ||  2.001       |   Update code to pinescript V3. Added divergence filtering options.

//  ||  General Input:
method = input(defval='RSI', options=['RSI', 'MACD', 'Stochastic', 'Volume', 'Accumulation/Distribution', 'Fisher Transform', 'CCI'])
SHOW_LABEL = input(title='Show Labels?', type=bool, defval=false)
SHOW_CHANNEL = input(title='Show Channel?', type=bool, defval=false)
high_src = high
low_src = low
//  ||  RSI / STOCH / VOLUME / ACC/DIST Input:
rsi_smooth = input(title='RSI/STOCH/Volume/ACC-DIST/Fisher/cci Smooth:', type=integer, defval=5)
//  ||  MACD Input:
macd_src = input(title='MACD Source:', type=source, defval=close)
macd_fast = input(title='MACD Fast:', type=integer, defval=12)
macd_slow = input(title='MACD Slow:', type=integer, defval=26)
macd_smooth = input(title='MACD Smooth Signal:', type=integer, defval=9)
//  ||  Filter Divergences Input:
filter_divergences = input(title='Filter Divergences?', defval=false, type=bool)
n_bar_min = input(title='Divergence minimum bar length:', defval=0)
n_bar_max = input(title='Divergence maximum bar length:', defval=1000)
price_change_min = input(title='Divergence minimum absolute price change %:', defval=10.0, type=float)
price_change_max = input(title='Divergence maximum absolute price change %:', defval=50.0, type=float)
//  ||  Functions:
f_top_fractal(_src)=>_src[4] < _src[2] and _src[3] < _src[2] and _src[2] > _src[1] and _src[2] > _src[0]
f_bot_fractal(_src)=>_src[4] > _src[2] and _src[3] > _src[2] and _src[2] < _src[1] and _src[2] < _src[0]
f_fractalize(_src)=>f_top_fractal(_src) ? 1 : f_bot_fractal(_src) ? -1 : 0

//  ||••>   START MACD FUNCTION
f_macd(_src, _fast, _slow, _smooth)=>
    _fast_ma = sma(_src, _fast)
    _slow_ma = sma(_src, _slow)
    _macd = _fast_ma-_slow_ma
    _signal = ema(_macd, _smooth)
    _hist = _macd - _signal
//  ||<••   END MACD FUNCTION

//  ||••>   START ACC/DIST FUNCTION
f_accdist(_smooth)=>_return=sma(cum(close==high and close==low or high==low ? 0 : ((2*close-low-high)/(high-low))*volume), _smooth)
//  ||<••   END ACC/DIST FUNCTION

//  ||••>   START FISHER FUNCTION
f_fisher(_src, _window)=>
    _h = highest(_src, _window)
    _l = lowest(_src, _window)
    _value0 = na
    _value0 := .66 * ((_src - _l) / max(_h - _l, .001) - .5) + .67 * nz(_value0[1])
    _value1 = _value0 > .99 ? .999 : _value0 < -.99 ? -.999 : _value0
    _fisher = 0.0
    _fisher := .5 * log((1 + _value1) / max(1 - _value1, .001)) + .5 * nz(_fisher[1])
//  ||<••   END FISHER FUNCTION

//  ||  Method selection
oscilator_high = na
oscilator_low = na
if method == 'RSI'
    oscilator_high := rsi(high_src, rsi_smooth)
    oscilator_low := rsi(low_src, rsi_smooth)
if method == 'MACD'
    oscilator_high := f_macd(macd_src, macd_fast, macd_slow, macd_smooth)
    oscilator_low := f_macd(macd_src, macd_fast, macd_slow, macd_smooth)
if method == 'Stochastic'
    oscilator_high := stoch(close, high, low, rsi_smooth)
    oscilator_low := stoch(close, high, low, rsi_smooth)
if method == 'Volume'
    oscilator_high := sma(volume, rsi_smooth)
    oscilator_low := sma(volume, rsi_smooth)
if method == 'Accumulation/Distribution'
    oscilator_high := f_accdist(rsi_smooth)
    oscilator_low := f_accdist(rsi_smooth)
if method == 'Fisher Transform'
    oscilator_high := f_fisher(high_src, rsi_smooth)
    oscilator_low := f_fisher(low_src, rsi_smooth)
if method == 'CCI'
    oscilator_high := cci(high_src, rsi_smooth)
    oscilator_low := cci(low_src, rsi_smooth)


fractal_top = f_fractalize(oscilator_high) > 0 ? oscilator_high[2] : na
fractal_bot = f_fractalize(oscilator_low) < 0 ? oscilator_low[2] : na

high_prev = valuewhen(fractal_top, oscilator_high[2], 0)[2]
high_price = valuewhen(fractal_top, high[2], 0)[2]
low_prev = valuewhen(fractal_bot, oscilator_low[2], 0)[2] 
low_price = valuewhen(fractal_bot, low[2], 0)[2]

regular_bearish_div = fractal_top and high[2] > high_price and oscilator_high[2] < high_prev
hidden_bearish_div = fractal_top and high[2] < high_price and oscilator_high[2] > high_prev
regular_bullish_div = fractal_bot and low[2] < low_price and oscilator_low[2] > low_prev
hidden_bullish_div = fractal_bot and low[2] > low_price and oscilator_low[2] < low_prev

//  |   Filter divergences:
//debug_var_1 = na, debug_var_2 = na, debug_var_3 = na, debug_var_4 = na, debug_var_5 = na, debug_var_6 = na
filter_bull = false
filter_bear = false
if filter_divergences
    if regular_bearish_div or hidden_bearish_div
        bars_from_previous = n[2] - valuewhen(fractal_top, n[2], 0)[2]
        previous_price = valuewhen(fractal_top, high[2], 0)[2]
        price_perc_change = ((abs(high[2] - previous_price) / previous_price) * 100)
        bars_check = bars_from_previous >= n_bar_min and bars_from_previous <= n_bar_max ? true : false
        price_check = price_perc_change >= price_change_min and price_perc_change <= price_change_max ? true : false
        if bars_check and price_check
            filter_bear := true
            // debug_var_1 := price_perc_change
            // debug_var_2 := bars_from_previous
            // debug_var_3 := previous_price
    if regular_bullish_div or hidden_bullish_div
        bars_from_previous = n[2] - valuewhen(fractal_bot, n[2], 0)[2]
        previous_price = valuewhen(fractal_bot, low[2], 0)[2]
        price_perc_change = ((abs(low[2] - previous_price) / previous_price) * 100)
        bars_check = bars_from_previous >= n_bar_min and bars_from_previous <= n_bar_max ? true : false
        price_check = price_perc_change >= price_change_min and price_perc_change <= price_change_max ? true : false
        if bars_check and price_check
            filter_bull := true
            // debug_var_4 := price_perc_change
            // debug_var_5 := bars_from_previous
            // debug_var_6 := previous_price

// plot(debug_var_1, color=blue, offset=-2)
// plot(debug_var_2, color=blue, offset=-2)
// plot(debug_var_3, color=blue, offset=-2)
// plot(debug_var_4, color=blue, offset=-2)
// plot(debug_var_5, color=blue, offset=-2)
// plot(debug_var_6, color=blue, offset=-2)

//  |   Labels and plots:
plotshape(title='+F', series=not filter_divergences ? na : filter_bear ? high[2] : na, text='F\n', style=shape.labeldown, location=location.absolute, color=maroon, textcolor=white, offset=-2)
plotshape(title='-F', series=not filter_divergences ? na : filter_bull ? low[2] : na, text='\nF', style=shape.labelup, location=location.absolute, color=green, textcolor=white, offset=-2)

plotshape(title='+RBD', series=not SHOW_LABEL ? na : regular_bearish_div ? high[2] : na, text='R', style=shape.labeldown, location=location.absolute, color=maroon, textcolor=white, offset=-2)
plotshape(title='+HBD', series=not SHOW_LABEL ? na : hidden_bearish_div ? high[2] : na, text='H', style=shape.labeldown, location=location.absolute, color=maroon, textcolor=white, offset=-2)
plotshape(title='-RBD', series=not SHOW_LABEL ? na : regular_bullish_div ? low[2] : na, text='R', style=shape.labelup, location=location.absolute, color=green, textcolor=white, offset=-2)
plotshape(title='-HBD', series=not SHOW_LABEL ? na : hidden_bullish_div ? low[2] : na, text='H', style=shape.labelup, location=location.absolute, color=green, textcolor=white, offset=-2)

plot(title='H F', series=fractal_top ? high[2] : na, color=regular_bearish_div or hidden_bearish_div ? maroon : not SHOW_CHANNEL ? na : silver, offset=-2)
plot(title='L F', series=fractal_bot ? low[2] : na, color=regular_bullish_div or hidden_bullish_div ? green : not SHOW_CHANNEL ? na : silver, offset=-2)
plot(title='H D', series=fractal_top ? high[2] : na, style=circles, color=regular_bearish_div or hidden_bearish_div ? maroon : not SHOW_CHANNEL ? na : silver, linewidth=3, offset=-2)
plot(title='L D', series=fractal_bot ? low[2] : na, style=circles, color=regular_bullish_div or hidden_bullish_div ? green : not SHOW_CHANNEL ? na : silver, linewidth=3, offset=-2)
